<html lang="en">
    <%- include("Partials/head") %>
<body>
    <%- include("Partials/NavigationBars/nav") %>
    <div style="display: none;" id="form"><%- include ('Partials/cardForm') %></div>

    <main class="" id="content">
        <% if (project){ %>
            <header contenteditable="true"><%=projectTitle  %></header>
            <div id="para" contenteditable="true"><%= description %></div>
            <% if(isCreator){ %>
                <%- include("Partials/newUserForm") %>  
            <% } %>
            <div id="icon-container" class="hidden fixed bottom-0 right-0 mb-2 mr-16 space-y-2">
                <button id="delete" class="absolute -top-36 -left-12" data-project-id="<%= id %>">
                    <span class="material-symbols-outlined out">delete</span>
                </button>
                <button id="pen" class="absolute -top-32 -left-20">
                    <span class="material-symbols-outlined out">stylus</span>
                </button>
            </div>
            <%- include("Partials/notDoneCards.ejs") %>

            <%- include("Partials/doneCards.ejs") %>

            
            <div class="container" id="c2"></div>
            <div class="fixed bottom-0 right-0  mb-6 mr-8">
                <button id="opt"><span class="material-symbols-outlined out">list</span></button>
            </div>
        <% } else{ %>
            <h1>Project not found</h1>
        <% } %>
    </main>
    <script>
        const socket = io();
        const projectId = "<%= id %>";  // Global project ID

        document.addEventListener('DOMContentLoaded', function() {
            const optButton = document.getElementById('opt');
            const iconContainer = document.getElementById('icon-container');
            const deleteButton = document.getElementById('delete');
            const penButton = document.getElementById('pen');

            const header = document.querySelector('header');
            const para = document.getElementById('para');

            optButton.addEventListener('click', function() {
                iconContainer.style.display = 
                    (iconContainer.style.display === 'none' || iconContainer.style.display === '') 
                    ? 'block' : 'none';
            });

            // Save handler
            let saveTimeout;

            function autoSave() {
                const headerValue = header.innerText;
                const paraValue = para.innerText;

                fetch(`/project/${projectId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        title: headerValue,
                        description: paraValue,
                    }),
                })
                .then(response => {
                    if (response.ok) {
                        console.log("Project auto-saved");
                        socket.emit('projectUpdated', {
                            projectId,
                            title: headerValue,
                            description: paraValue
                        });
                    } else {
                        console.error("Auto-save failed");
                    }
                })
                .catch(error => {
                    console.error("Auto-save error:", error);
                });
            }

            // Debounce logic to avoid rapid saving
            function debounceAutoSave() {
                clearTimeout(saveTimeout);
                saveTimeout = setTimeout(autoSave, 1000); // Save 1s after last edit
            }

            // Listen for changes while editing
            header.addEventListener('input', debounceAutoSave);
            para.addEventListener('input', debounceAutoSave);

            // Real-time update handler
            socket.on('projectUpdated', (data) => {
                if (data.projectId === projectId) {
                    header.innerText = data.title;
                    para.innerText = data.description;
                    console.log('Project updated in real-time');
                    alert("Project has been updated by a user, updating format...");
                }
            });


            // Delete handler
            deleteButton.addEventListener('click', async function() {
                const userConfirmed = confirm("Are you sure you want to delete this project?");
                if (!userConfirmed) return;

                try {
                    const response = await fetch(`/project/${projectId}`, {
                        method: 'DELETE',
                    });

                    if (response.ok) {
                        console.log("Project deleted");

                        socket.emit('projectDeleted', { projectId });

                        // Redirect the deleter
                        window.location.href = '/';
                    } else {
                        console.error("Failed to delete project");
                    }
                } catch (error) {
                    console.error("Error deleting project:", error);
                }
            });

            // Realtime deletion handler
            socket.on('projectDeleted', (data) => {
                if (data.projectId === projectId) {
                    if (document.hasFocus()) {
                        alert('This project has been deleted by another user.');
                    } else{
                        alert('A project was deleted by another user.');
                    }
                    window.location.href = '/';
                }
            });

            penButton.addEventListener('click', function(){
                iconContainer.style.display = 'none';
                const form = document.getElementById('form');
                form.style.display = 'block';

            });

        });
 
    </script>
</body>
</html>