<!-- Active To-Dos Section -->
<h1 class="text-2xl font-bold text-gray-800 mb-6">&gt; Active To Dos</h1>

<% if (notDoneCards && notDoneCards.length > 0) { %>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
    <% notDoneCards.forEach((card) => { %>
      <div class="rounded-lg border-t-2 border-amber-500 flex flex-col justify-between h-72 card" 
           id="card-<%= card._id %>" 
           data-priority="<%= card.priority %>">
        <!-- Title Section -->
        <div class="p-2 border-b-2 border-black">
          <div class="font-semibold text-gray-800 p-2 text-lg title" contenteditable="true">
            <%= card.title || "Untitled" %>
          </div>
        </div>
        
        <!-- Description in the Middle -->
        <div class="unique" style="display: none;"><%= card.done %></div>
        <div class="p-3 flex-grow para" style="overflow-y: scroll;" contenteditable="true">
          <%= card.description %>
        </div>
        
        <div class="flex items-center justify-between p-3 border-t border-amber-500">
          <div class="flex items-center">
            <label for="priority-<%= card._id %>" class="text-gray-700 mr-2">Priority:</label>
            <select 
              id="priority-<%= card._id %>" 
              class="p-1 border border-gray-300 rounded text-sm bg-white select"
            >
              <option value="1" <%= card.priority === 1 ? 'selected' : '' %>>1</option>
              <option value="2" <%= card.priority === 2 ? 'selected' : '' %>>2</option>
              <option value="3" <%= card.priority === 3 ? 'selected' : '' %>>3</option>
            </select>
          </div>
          <div class="flex space-x-3">
            <button class="p-1.5 bg-green-500 text-white rounded-md hover:bg-green-600 check" data-card-id="<%= card._id %>">
              <span class="material-symbols-outlined text-lg">check</span>
            </button>
            <button class="p-1.5 bg-red-500 text-white rounded-md hover:bg-red-600 deletez" data-card-id="<%= card._id %>">
              <span class="material-symbols-outlined text-lg">delete</span>
            </button>
            <button class="p-1.5 bg-black text-white rounded-md save" data-card-id="<%= card._id %>">
              <span class="material-symbols-outlined text-lg">save</span>
            </button>
          </div>
        </div>
      </div>
    <% }); %>
  </div>
<% } else { %>
  <p class="text-gray-500">No tasks to display.</p>
<% } %>

<script>

// Function to set the background color based on priority
function setCardBackgroundColor(cardElement) {
  const priority = parseInt(cardElement.getAttribute('data-priority'));
  
  // Remove existing background color classes
  cardElement.classList.remove('bg-green-500', 'bg-amber-500', 'bg-red-600');
  
  // Apply the new background color based on priority
  switch (priority) {
    case 1:
      cardElement.classList.add('bg-green-500');
      break;
    case 2:
      cardElement.classList.add('bg-amber-500'); 
      break;
    case 3:
      cardElement.classList.add('bg-red-600'); 
      break;
    default:
      // Default fallback color if priority is not 1, 2, or 3
      cardElement.classList.add('bg-cyan-400');
  }
}

// Function to attach event listeners
function attachEventListeners() {
  // Set background colors for all cards on page load
  document.querySelectorAll('[id^="card-"]').forEach((cardElement) => {
    setCardBackgroundColor(cardElement);
  });

  // Priority select change event
  document.querySelectorAll('.select').forEach((select) => {
    select.addEventListener('change', (event) => {
      const cardId = select.id.replace('priority-', '');
      const cardElement = document.getElementById(`card-${cardId}`);

      if (cardElement) {
        // Update the data-priority attribute
        cardElement.setAttribute('data-priority', select.value);
        // Update background color immediately
        setCardBackgroundColor(cardElement);
      }
    });
  });

  // Mark as done (check button)
  document.querySelectorAll('.check').forEach((button) => {
    button.addEventListener('click', async (event) => {
      try {
        const cardId = button.getAttribute('data-card-id');
        const cardElement = document.getElementById(`card-${cardId}`);
        
        if (!cardElement) {
          console.error(`Card element with ID "card-${cardId}" not found`);
          return;
        }

        // Extract the updated title and description from the card
        const title = cardElement.querySelector('.title').innerText.trim();
        const description = cardElement.querySelector('.para').innerHTML.trim();
        const priority = parseInt(cardElement.querySelector(`#priority-${cardId}`).value);

        // Prepare the body of the request
        const response = await fetch(`/project/${parentProject}/${cardId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            title,
            description,
            priority,
            done: true  // Mark the card as done
          })
        });

        if (response.ok) {
          console.log('Card marked as done successfully');
          window.location.reload();
        } else {
          console.error('Failed to mark card as done:', await response.text());
        }
      } catch (err) {
        console.error('Error marking card as done:', err);
      }
    });
  });

  // Delete card
  document.querySelectorAll('.deletez').forEach((button) => {
    button.addEventListener('click', async (event) => {
      try {
        const cardId = button.getAttribute('data-card-id');
        
        const response = await fetch(`/project/${parentProject}/${cardId}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          console.log('Card deleted successfully');
          window.location.reload();
        } else {
          console.error('Failed to delete card:', await response.text());
        }
      } catch (err) {
        console.error('Error deleting card:', err);
      }
    });
  });

  // Save card
  document.querySelectorAll('.save').forEach((button) => {
    button.addEventListener('click', async (event) => {
      try {
        const cardId = button.getAttribute('data-card-id');
        const cardElement = document.getElementById(`card-${cardId}`);
        
        if (!cardElement) {
          console.error(`Card element with ID "card-${cardId}" not found`);
          return;
        }

        // Extract the updated title and description from the card
        const title = cardElement.querySelector('.title').innerText.trim();
        const description = cardElement.querySelector('.para').innerHTML.trim();
        const priority = parseInt(cardElement.querySelector(`#priority-${cardId}`).value);
        const doneElement = cardElement.querySelector('.unique');
        const done = doneElement ? doneElement.innerHTML.trim() === 'true' : false;

        // Prepare the body of the request
        const response = await fetch(`/project/${parentProject}/${cardId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            title,
            description,
            priority,
            done
          })
        });

        if (response.ok) {
          console.log('Card saved successfully');
          // Show a temporary visual confirmation without reloading
          const saveButton = cardElement.querySelector('.save');
          const originalBackground = saveButton.style.backgroundColor;
          saveButton.style.backgroundColor = '#4CAF50'; // Green
          
          setTimeout(() => {
            saveButton.style.backgroundColor = originalBackground;
          }, 1000);
        } else {
          console.error('Failed to save card:', await response.text());
        }
      } catch (err) {
        console.error('Error saving card:', err);
      }
    });
  });
}

// Attach event listeners when the page loads
document.addEventListener('DOMContentLoaded', () => {
  attachEventListeners();
});
</script>



